{
  "cmake.cmakePath": "/opt/homebrew/bin/cmake",
  "cmake.generator": "Ninja",
  "cmake.buildDirectory": "${workspaceFolder}/build",

  // Tell CMake exactly where SDK/FreeRTOS and the cross-compilers are
  "cmake.configureArgs": [
    "-DPICO_SDK_PATH=${workspaceFolder}/lib/pico-sdk",
    "-DFREERTOS_PATH=${workspaceFolder}/lib/freertos",
    "-DCMAKE_C_COMPILER=${env:ARM_BIN}/arm-none-eabi-gcc",
    "-DCMAKE_CXX_COMPILER=${env:ARM_BIN}/arm-none-eabi-g++",
    "-DCMAKE_ASM_COMPILER=${env:ARM_BIN}/arm-none-eabi-gcc",
    "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
  ],
  "cmake.configureEnvironment": {
    "ARM_BIN": "/Applications/Arm GNUToolchain 14.3.Rel1 (arm-none-eabi)/bin"
  },

  // Let the C/C++ extension read CMakeâ€™s config automatically
  "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",

  // Terminals inside VS Code should also see the toolchain first on PATH
  "terminal.integrated.env.osx": {
    "PICO_SDK_PATH": "${workspaceFolder}/lib/pico-sdk",
    "ARM_BIN": "/Applications/Arm GNUToolchain 14.3.Rel1 (arm-none-eabi)/bin",
    "PATH": "${env:ARM_BIN}:/opt/homebrew/bin:/opt/homebrew/sbin:${env:PATH}"
  }
}
